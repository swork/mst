#! /usr/local/bin/python

todo = """
 - Test bib assignments, ensure each is unique
 - Set timing and presentation precision separately; handle ties
 - Identify anomalies: dup bibscans, bad bibs (no record)
 - Review .commit() -- was REQUIRED after insert, why?  (ORM is the answer)
"""

import sys, getopt
import wx
from ui.editor import MainFrame
from db import Db

class MSTEditorApp(wx.PySimpleApp):
    def __init__(self, dbstring):
        wx.PySimpleApp.__init__(self)
        self.db = Db(dbstring, logfilename="editor.log", echo=False)
        self.frame = MainFrame(None, wx.ID_ANY, 'Edit Timing', self.db)
        self.Bind(wx.EVT_MENU, self.OnMakeEasys, id=MainFrame.ID_EASY)

        self.todo_dlg = wx.MessageDialog(self.frame, todo, "To Do", wx.OK)
#        self.todo_dlg.ShowModal()
        self.todo_dlg.Destroy()

    def OnMakeEasys(self, evt):
        def check_assign(t, i, empty_at, db):
            if not None is empty_at and empty_at == i - 3:
                if (not None is t[i-2]['bib'] and
                    not db.IsFlagValue(t[i-2]['bib']) and
                    t[i-1]['bib'] is None):
                    set = { 'impulse': t[i-1]['impulseid'] }
                    db.session.query(Db.Scan).\
                        filter("id = %s" % t[i-2]['scanid']).\
                        update(set)
                    return 1
            return 0
        def assign_obvious(tableresults, db):
            counter = 0
            tableresults.reverse()
            empty_at = None
            for i, row in enumerate(tableresults):
                if row['bib'] == Db.FLAG_CORRAL_EMPTY:
                    counter += check_assign(tableresults, i,empty_at, db)
                    empty_at = i
            i = len(tableresults)
            if i >= 3 and tableresults[i-3]['bib'] == Db.FLAG_CORRAL_EMPTY:
                counter += check_assign(tableresults, i, empty_at, db)
            del tableresults[:]
            return counter

        table = self.frame.control.GetTable()
        assigned_count = assign_obvious(table.data, self.db)

        table.Reload()
        dlg = wx.MessageDialog(self.frame,
                               "Did %d assignments." % assigned_count,
                               "Make Easy Assignments", wx.OK)
        dlg.ShowModal()
        dlg.Destroy()

    def Reload(self):
        self.frame.control.GetTable().Reload()

    def LoadTestDataSimple(self):
        self.db.session.add_all([
                Db.Entry(101, "Albert"),
                Db.Entry(102, "Bob"),
                Db.Entry(103, "Clyde"),
                Db.Entry(104, "Dale"),
                Db.Entry(105, "Ernie"),
                Db.Impulse("12:02:10"),
                Db.Impulse("12:03:33"),
                Db.Impulse("12:03:33"),
                Db.Impulse("12:14:44"),
                Db.Scan("12:02:22", 102),
                Db.Scan("12:02:25", Db.FLAG_CORRAL_EMPTY),
                Db.Scan("12:04:01", 104),
                Db.Scan("12:04:10", 101),
                Db.Scan("12:04:16", 104),
                Db.Scan("12:04:20", Db.FLAG_ERROR),
                Db.Scan("12:04:25", Db.FLAG_CORRAL_EMPTY),
                Db.Scan("12:14:59", 105),
                Db.Scan("12:15:03", Db.FLAG_CORRAL_EMPTY),
                ])

    def LoadTestDataBig(self):
        for bibnum in range(101,900):
            self.db.session.add(Db.Entry(bibnum, "Rider_%d" % bibnum))
            itime = "12:%02d:%02d" % (bibnum / 60, bibnum % 60)
            self.db.session.add(Db.Impulse(itime))
            self.db.session.add(Db.Scan(itime, bibnum))
            self.db.session.add(Db.Scan(itime, Db.FLAG_CORRAL_EMPTY))

def print_usage(argv0):
    print "%s [-h] [-c connectstring]" % argv0

class Usage(Exception):
    def __init__(self, msg):
        self.msg = msg

def main(argv=None):
    if argv is None:
        argv = sys.argv

    try:
        try:
            opts, args = getopt.getopt(argv[1:], "c:h", ["connect=","help"])
            dbstring = None
            for o, a in opts:
                if o in ("-c", "--connect"):
                    dbstring = a
                elif o in ("-h", "--help"):
                    print_usage(argv[0])
                    return 2
                else:
                    assert getopt.GetoptError, "unhandled option %s" % o
        except getopt.GetoptError, msg:
            raise Usage(msg)

        if dbstring is None:
            dbstring = 'mysql://anonymous@localhost/test'
#            dbstring = 'sqlite:///:memory:'
        app = MSTEditorApp(dbstring)
        if dbstring == 'sqlite:///:memory:':
            app.LoadTestDataBig()
            app.db.session.commit()
        app.Reload()
        app.MainLoop()
        return 0

    except Usage, err:
        print >>sys.stderr, err.msg
        print >>sys.stderr, "for help use --help"
        return 2

sys.exit(main())
